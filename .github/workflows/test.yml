name: Build & Test Action

on:
  pull_request:
  push:
    branches:
      - main
      - ci
      - 'releases/*'

jobs:
  # Test for build errors
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: npm install
    - run: npm run all

  # Run Action with all GCC versions and in all environments
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        release:
          - 'latest'
          - '10.3-2021.07'
          - '10-2020-q4'
          - '9-2020-q2'
          - '9-2019-q4'
          - '8-2019-q3'
          - '8-2018-q4'
          - '7-2018-q2'
          - '7-2017-q4'
          - '6-2017-q2'
          - '6-2017-q1'
          - '6-2016-q4'
          - '5-2016-q3'
          - '5-2016-q2'
          - '5-2016-q1'
          - '5-2015-q4'
          - '4.9-2015-q3'
          - '4.9-2015-q2'
          - '4.9-2015-q1'
          - '4.9-2014-q4'
          - '4.8-2014-q3'
          - '4.8-2014-q2'
          - '4.8-2014-q1'
          - '4.7-2014-q2'
          - '4.8-2013-q4'
          - '4.7-2013-q3'
          - '4.7-2013-q2'
          - '4.7-2013-q1'
          - '4.7-2012-q4'
        exclude:
          - os: windows-latest
            release: '4.7-2012-q4' # There's no .zip release for Windows for this version
    name: Test ${{ matrix.release }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Ensure the compiler is not present (Unix)
      if: runner.os != 'Windows'
      run: '! arm-none-eabi-gcca --version'
    - name: Set up GCC Arm Compiler
      uses: ./
      with:
        release: ${{ matrix.release }}
    - name: Print out programs invoked by the compiler
      run: arm-none-eabi-gcc -v
    - name: Print out version
      run: arm-none-eabi-gcc --version
    - name: Check the version matches
      if: |
        (!contains(matrix.release, '2012') && !contains(matrix.release, '2013') && !contains(matrix.release, '2014')
        && !contains(matrix.release, '2015') && !contains(matrix.release, '2016') && (matrix.release != 'latest'))
      run: arm-none-eabi-gcc --version | grep -q ${{ matrix.release }}
